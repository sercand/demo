# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: feedprovider.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import common_pb2 as common__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='feedprovider.proto',
  package='feed.v1',
  syntax='proto3',
  serialized_pb=_b('\n\x12\x66\x65\x65\x64provider.proto\x12\x07\x66\x65\x65\x64.v1\x1a\x0c\x63ommon.proto\">\n\x12ProviderGetRequest\x12(\n\x07request\x18\x01 \x01(\x0b\x32\x17.feed.v1.FeedGetRequest2L\n\x0c\x46\x65\x65\x64Provider\x12<\n\x03Get\x12\x1b.feed.v1.ProviderGetRequest\x1a\x18.feed.v1.FeedGetResponseB\x08Z\x06\x66\x65\x65\x64pbb\x06proto3')
  ,
  dependencies=[common__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_PROVIDERGETREQUEST = _descriptor.Descriptor(
  name='ProviderGetRequest',
  full_name='feed.v1.ProviderGetRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='request', full_name='feed.v1.ProviderGetRequest.request', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=45,
  serialized_end=107,
)

_PROVIDERGETREQUEST.fields_by_name['request'].message_type = common__pb2._FEEDGETREQUEST
DESCRIPTOR.message_types_by_name['ProviderGetRequest'] = _PROVIDERGETREQUEST

ProviderGetRequest = _reflection.GeneratedProtocolMessageType('ProviderGetRequest', (_message.Message,), dict(
  DESCRIPTOR = _PROVIDERGETREQUEST,
  __module__ = 'feedprovider_pb2'
  # @@protoc_insertion_point(class_scope:feed.v1.ProviderGetRequest)
  ))
_sym_db.RegisterMessage(ProviderGetRequest)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('Z\006feedpb'))
import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class FeedProviderStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Get = channel.unary_unary(
        '/feed.v1.FeedProvider/Get',
        request_serializer=ProviderGetRequest.SerializeToString,
        response_deserializer=common__pb2.FeedGetResponse.FromString,
        )


class FeedProviderServicer(object):

  def Get(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FeedProviderServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Get': grpc.unary_unary_rpc_method_handler(
          servicer.Get,
          request_deserializer=ProviderGetRequest.FromString,
          response_serializer=common__pb2.FeedGetResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'feed.v1.FeedProvider', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaFeedProviderServicer(object):
  def Get(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaFeedProviderStub(object):
  def Get(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Get.future = None


def beta_create_FeedProvider_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('feed.v1.FeedProvider', 'Get'): ProviderGetRequest.FromString,
  }
  response_serializers = {
    ('feed.v1.FeedProvider', 'Get'): common__pb2.FeedGetResponse.SerializeToString,
  }
  method_implementations = {
    ('feed.v1.FeedProvider', 'Get'): face_utilities.unary_unary_inline(servicer.Get),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_FeedProvider_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('feed.v1.FeedProvider', 'Get'): ProviderGetRequest.SerializeToString,
  }
  response_deserializers = {
    ('feed.v1.FeedProvider', 'Get'): common__pb2.FeedGetResponse.FromString,
  }
  cardinalities = {
    'Get': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'feed.v1.FeedProvider', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
