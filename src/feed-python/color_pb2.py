# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: color.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='color.proto',
  package='feed.v1',
  syntax='proto3',
  serialized_pb=_b('\n\x0b\x63olor.proto\x12\x07\x66\x65\x65\x64.v1\"\x14\n\x05\x43olor\x12\x0b\n\x03hex\x18\x01 \x01(\t\"\x11\n\x0fNewColorRequest2B\n\x0e\x43olorGenerator\x12\x30\n\x04Next\x12\x18.feed.v1.NewColorRequest\x1a\x0e.feed.v1.ColorB\x08Z\x06\x66\x65\x65\x64pbb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_COLOR = _descriptor.Descriptor(
  name='Color',
  full_name='feed.v1.Color',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hex', full_name='feed.v1.Color.hex', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=24,
  serialized_end=44,
)


_NEWCOLORREQUEST = _descriptor.Descriptor(
  name='NewColorRequest',
  full_name='feed.v1.NewColorRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=46,
  serialized_end=63,
)

DESCRIPTOR.message_types_by_name['Color'] = _COLOR
DESCRIPTOR.message_types_by_name['NewColorRequest'] = _NEWCOLORREQUEST

Color = _reflection.GeneratedProtocolMessageType('Color', (_message.Message,), dict(
  DESCRIPTOR = _COLOR,
  __module__ = 'color_pb2'
  # @@protoc_insertion_point(class_scope:feed.v1.Color)
  ))
_sym_db.RegisterMessage(Color)

NewColorRequest = _reflection.GeneratedProtocolMessageType('NewColorRequest', (_message.Message,), dict(
  DESCRIPTOR = _NEWCOLORREQUEST,
  __module__ = 'color_pb2'
  # @@protoc_insertion_point(class_scope:feed.v1.NewColorRequest)
  ))
_sym_db.RegisterMessage(NewColorRequest)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('Z\006feedpb'))
import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class ColorGeneratorStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Next = channel.unary_unary(
        '/feed.v1.ColorGenerator/Next',
        request_serializer=NewColorRequest.SerializeToString,
        response_deserializer=Color.FromString,
        )


class ColorGeneratorServicer(object):

  def Next(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ColorGeneratorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Next': grpc.unary_unary_rpc_method_handler(
          servicer.Next,
          request_deserializer=NewColorRequest.FromString,
          response_serializer=Color.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'feed.v1.ColorGenerator', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaColorGeneratorServicer(object):
  def Next(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaColorGeneratorStub(object):
  def Next(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Next.future = None


def beta_create_ColorGenerator_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('feed.v1.ColorGenerator', 'Next'): NewColorRequest.FromString,
  }
  response_serializers = {
    ('feed.v1.ColorGenerator', 'Next'): Color.SerializeToString,
  }
  method_implementations = {
    ('feed.v1.ColorGenerator', 'Next'): face_utilities.unary_unary_inline(servicer.Next),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_ColorGenerator_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('feed.v1.ColorGenerator', 'Next'): NewColorRequest.SerializeToString,
  }
  response_deserializers = {
    ('feed.v1.ColorGenerator', 'Next'): Color.FromString,
  }
  cardinalities = {
    'Next': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'feed.v1.ColorGenerator', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
