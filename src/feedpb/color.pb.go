// Code generated by protoc-gen-gogo.
// source: color.proto
// DO NOT EDIT!

/*
Package feedpb is a generated protocol buffer package.

It is generated from these files:
	color.proto
	common.proto
	feedprovider.proto
	newsfeed.proto

It has these top-level messages:
	Color
	NewColorRequest
	FeedItem
	FeedGetRequest
	FeedGetResponse
	ProviderGetRequest
*/
package feedpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Color struct {
	Hex string `protobuf:"bytes,1,opt,name=hex,proto3" json:"hex,omitempty"`
}

func (m *Color) Reset()                    { *m = Color{} }
func (m *Color) String() string            { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()               {}
func (*Color) Descriptor() ([]byte, []int) { return fileDescriptorColor, []int{0} }

type NewColorRequest struct {
}

func (m *NewColorRequest) Reset()                    { *m = NewColorRequest{} }
func (m *NewColorRequest) String() string            { return proto.CompactTextString(m) }
func (*NewColorRequest) ProtoMessage()               {}
func (*NewColorRequest) Descriptor() ([]byte, []int) { return fileDescriptorColor, []int{1} }

func init() {
	proto.RegisterType((*Color)(nil), "feed.v1.Color")
	proto.RegisterType((*NewColorRequest)(nil), "feed.v1.NewColorRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for ColorGenerator service

type ColorGeneratorClient interface {
	Next(ctx context.Context, in *NewColorRequest, opts ...grpc.CallOption) (*Color, error)
}

type colorGeneratorClient struct {
	cc *grpc.ClientConn
}

func NewColorGeneratorClient(cc *grpc.ClientConn) ColorGeneratorClient {
	return &colorGeneratorClient{cc}
}

func (c *colorGeneratorClient) Next(ctx context.Context, in *NewColorRequest, opts ...grpc.CallOption) (*Color, error) {
	out := new(Color)
	err := grpc.Invoke(ctx, "/feed.v1.ColorGenerator/Next", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ColorGenerator service

type ColorGeneratorServer interface {
	Next(context.Context, *NewColorRequest) (*Color, error)
}

func RegisterColorGeneratorServer(s *grpc.Server, srv ColorGeneratorServer) {
	s.RegisterService(&_ColorGenerator_serviceDesc, srv)
}

func _ColorGenerator_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColorGeneratorServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.v1.ColorGenerator/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColorGeneratorServer).Next(ctx, req.(*NewColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ColorGenerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "feed.v1.ColorGenerator",
	HandlerType: (*ColorGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Next",
			Handler:    _ColorGenerator_Next_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorColor,
}

func (m *Color) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Color) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hex) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintColor(data, i, uint64(len(m.Hex)))
		i += copy(data[i:], m.Hex)
	}
	return i, nil
}

func (m *NewColorRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *NewColorRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Color(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Color(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintColor(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Color) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hex)
	if l > 0 {
		n += 1 + l + sovColor(uint64(l))
	}
	return n
}

func (m *NewColorRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovColor(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozColor(x uint64) (n int) {
	return sovColor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Color) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowColor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Color: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Color: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowColor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthColor
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hex = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipColor(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthColor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewColorRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowColor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewColorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewColorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipColor(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthColor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipColor(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowColor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowColor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowColor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthColor
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowColor
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipColor(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthColor = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowColor   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("color.proto", fileDescriptorColor) }

var fileDescriptorColor = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0xcf, 0xc9,
	0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0x4b, 0x4d, 0x4d, 0xd1, 0x2b, 0x33,
	0x54, 0x92, 0xe4, 0x62, 0x75, 0x06, 0x89, 0x0b, 0x09, 0x70, 0x31, 0x67, 0xa4, 0x56, 0x48, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x4a, 0x82, 0x5c, 0xfc, 0x7e, 0xa9, 0xe5, 0x60, 0xd9,
	0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x23, 0x27, 0x2e, 0x3e, 0x30, 0xdf, 0x3d, 0x35, 0x2f,
	0xb5, 0x28, 0xb1, 0x24, 0xbf, 0x48, 0xc8, 0x80, 0x8b, 0xc5, 0x2f, 0xb5, 0xa2, 0x44, 0x48, 0x42,
	0x0f, 0x6a, 0xa2, 0x1e, 0x9a, 0x1e, 0x29, 0x3e, 0xb8, 0x0c, 0x58, 0xd8, 0x49, 0xe2, 0xc4, 0x23,
	0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x8a,
	0x0d, 0xa4, 0xa0, 0x20, 0x29, 0x89, 0x0d, 0xec, 0x36, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa6, 0xa6, 0x47, 0xeb, 0xaa, 0x00, 0x00, 0x00,
}
