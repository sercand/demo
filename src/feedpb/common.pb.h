// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace feed {
namespace v1 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class FeedGetRequest;
class FeedGetResponse;
class FeedItem;

// ===================================================================

class FeedItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:feed.v1.FeedItem) */ {
 public:
  FeedItem();
  virtual ~FeedItem();

  FeedItem(const FeedItem& from);

  inline FeedItem& operator=(const FeedItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedItem& default_instance();

  void Swap(FeedItem* other);

  // implements Message ----------------------------------------------

  inline FeedItem* New() const { return New(NULL); }

  FeedItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeedItem& from);
  void MergeFrom(const FeedItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 1;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string color = 2;
  void clear_color();
  static const int kColorFieldNumber = 2;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional string provider_name = 4;
  void clear_provider_name();
  static const int kProviderNameFieldNumber = 4;
  const ::std::string& provider_name() const;
  void set_provider_name(const ::std::string& value);
  void set_provider_name(const char* value);
  void set_provider_name(const char* value, size_t size);
  ::std::string* mutable_provider_name();
  ::std::string* release_provider_name();
  void set_allocated_provider_name(::std::string* provider_name);

  // optional int32 score = 5;
  void clear_score();
  static const int kScoreFieldNumber = 5;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:feed.v1.FeedItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr provider_name_;
  ::google::protobuf::int32 score_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FeedItem* default_instance_;
};
// -------------------------------------------------------------------

class FeedGetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:feed.v1.FeedGetRequest) */ {
 public:
  FeedGetRequest();
  virtual ~FeedGetRequest();

  FeedGetRequest(const FeedGetRequest& from);

  inline FeedGetRequest& operator=(const FeedGetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedGetRequest& default_instance();

  void Swap(FeedGetRequest* other);

  // implements Message ----------------------------------------------

  inline FeedGetRequest* New() const { return New(NULL); }

  FeedGetRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeedGetRequest& from);
  void MergeFrom(const FeedGetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 limit = 1;
  void clear_limit();
  static const int kLimitFieldNumber = 1;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:feed.v1.FeedGetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 limit_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FeedGetRequest* default_instance_;
};
// -------------------------------------------------------------------

class FeedGetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:feed.v1.FeedGetResponse) */ {
 public:
  FeedGetResponse();
  virtual ~FeedGetResponse();

  FeedGetResponse(const FeedGetResponse& from);

  inline FeedGetResponse& operator=(const FeedGetResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedGetResponse& default_instance();

  void Swap(FeedGetResponse* other);

  // implements Message ----------------------------------------------

  inline FeedGetResponse* New() const { return New(NULL); }

  FeedGetResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeedGetResponse& from);
  void MergeFrom(const FeedGetResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .feed.v1.FeedItem items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::feed::v1::FeedItem& items(int index) const;
  ::feed::v1::FeedItem* mutable_items(int index);
  ::feed::v1::FeedItem* add_items();
  ::google::protobuf::RepeatedPtrField< ::feed::v1::FeedItem >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::feed::v1::FeedItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:feed.v1.FeedGetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::feed::v1::FeedItem > items_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static FeedGetResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FeedItem

// optional string title = 1;
inline void FeedItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeedItem::title() const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedItem.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedItem::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:feed.v1.FeedItem.title)
}
inline void FeedItem::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:feed.v1.FeedItem.title)
}
inline void FeedItem::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:feed.v1.FeedItem.title)
}
inline ::std::string* FeedItem::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:feed.v1.FeedItem.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeedItem::release_title() {
  // @@protoc_insertion_point(field_release:feed.v1.FeedItem.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:feed.v1.FeedItem.title)
}

// optional string color = 2;
inline void FeedItem::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeedItem::color() const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedItem.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedItem::set_color(const ::std::string& value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:feed.v1.FeedItem.color)
}
inline void FeedItem::set_color(const char* value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:feed.v1.FeedItem.color)
}
inline void FeedItem::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:feed.v1.FeedItem.color)
}
inline ::std::string* FeedItem::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:feed.v1.FeedItem.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeedItem::release_color() {
  // @@protoc_insertion_point(field_release:feed.v1.FeedItem.color)
  
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedItem::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:feed.v1.FeedItem.color)
}

// optional string text = 3;
inline void FeedItem::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeedItem::text() const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedItem.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedItem::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:feed.v1.FeedItem.text)
}
inline void FeedItem::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:feed.v1.FeedItem.text)
}
inline void FeedItem::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:feed.v1.FeedItem.text)
}
inline ::std::string* FeedItem::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:feed.v1.FeedItem.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeedItem::release_text() {
  // @@protoc_insertion_point(field_release:feed.v1.FeedItem.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedItem::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:feed.v1.FeedItem.text)
}

// optional string provider_name = 4;
inline void FeedItem::clear_provider_name() {
  provider_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FeedItem::provider_name() const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedItem.provider_name)
  return provider_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedItem::set_provider_name(const ::std::string& value) {
  
  provider_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:feed.v1.FeedItem.provider_name)
}
inline void FeedItem::set_provider_name(const char* value) {
  
  provider_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:feed.v1.FeedItem.provider_name)
}
inline void FeedItem::set_provider_name(const char* value, size_t size) {
  
  provider_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:feed.v1.FeedItem.provider_name)
}
inline ::std::string* FeedItem::mutable_provider_name() {
  
  // @@protoc_insertion_point(field_mutable:feed.v1.FeedItem.provider_name)
  return provider_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeedItem::release_provider_name() {
  // @@protoc_insertion_point(field_release:feed.v1.FeedItem.provider_name)
  
  return provider_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeedItem::set_allocated_provider_name(::std::string* provider_name) {
  if (provider_name != NULL) {
    
  } else {
    
  }
  provider_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provider_name);
  // @@protoc_insertion_point(field_set_allocated:feed.v1.FeedItem.provider_name)
}

// optional int32 score = 5;
inline void FeedItem::clear_score() {
  score_ = 0;
}
inline ::google::protobuf::int32 FeedItem::score() const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedItem.score)
  return score_;
}
inline void FeedItem::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:feed.v1.FeedItem.score)
}

// -------------------------------------------------------------------

// FeedGetRequest

// optional int32 limit = 1;
inline void FeedGetRequest::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 FeedGetRequest::limit() const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedGetRequest.limit)
  return limit_;
}
inline void FeedGetRequest::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:feed.v1.FeedGetRequest.limit)
}

// -------------------------------------------------------------------

// FeedGetResponse

// repeated .feed.v1.FeedItem items = 1;
inline int FeedGetResponse::items_size() const {
  return items_.size();
}
inline void FeedGetResponse::clear_items() {
  items_.Clear();
}
inline const ::feed::v1::FeedItem& FeedGetResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedGetResponse.items)
  return items_.Get(index);
}
inline ::feed::v1::FeedItem* FeedGetResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:feed.v1.FeedGetResponse.items)
  return items_.Mutable(index);
}
inline ::feed::v1::FeedItem* FeedGetResponse::add_items() {
  // @@protoc_insertion_point(field_add:feed.v1.FeedGetResponse.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::feed::v1::FeedItem >*
FeedGetResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:feed.v1.FeedGetResponse.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::feed::v1::FeedItem >&
FeedGetResponse::items() const {
  // @@protoc_insertion_point(field_list:feed.v1.FeedGetResponse.items)
  return items_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace feed

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
