// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feedprovider.proto

#ifndef PROTOBUF_feedprovider_2eproto__INCLUDED
#define PROTOBUF_feedprovider_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace feed {
namespace v1 {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_feedprovider_2eproto();
void protobuf_AssignDesc_feedprovider_2eproto();
void protobuf_ShutdownFile_feedprovider_2eproto();

class ProviderGetRequest;

// ===================================================================

class ProviderGetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:feed.v1.ProviderGetRequest) */ {
 public:
  ProviderGetRequest();
  virtual ~ProviderGetRequest();

  ProviderGetRequest(const ProviderGetRequest& from);

  inline ProviderGetRequest& operator=(const ProviderGetRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProviderGetRequest& default_instance();

  void Swap(ProviderGetRequest* other);

  // implements Message ----------------------------------------------

  inline ProviderGetRequest* New() const { return New(NULL); }

  ProviderGetRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProviderGetRequest& from);
  void MergeFrom(const ProviderGetRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProviderGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .feed.v1.FeedGetRequest request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::feed::v1::FeedGetRequest& request() const;
  ::feed::v1::FeedGetRequest* mutable_request();
  ::feed::v1::FeedGetRequest* release_request();
  void set_allocated_request(::feed::v1::FeedGetRequest* request);

  // @@protoc_insertion_point(class_scope:feed.v1.ProviderGetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::feed::v1::FeedGetRequest* request_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_feedprovider_2eproto();
  friend void protobuf_AssignDesc_feedprovider_2eproto();
  friend void protobuf_ShutdownFile_feedprovider_2eproto();

  void InitAsDefaultInstance();
  static ProviderGetRequest* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ProviderGetRequest

// optional .feed.v1.FeedGetRequest request = 1;
inline bool ProviderGetRequest::has_request() const {
  return !_is_default_instance_ && request_ != NULL;
}
inline void ProviderGetRequest::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
inline const ::feed::v1::FeedGetRequest& ProviderGetRequest::request() const {
  // @@protoc_insertion_point(field_get:feed.v1.ProviderGetRequest.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::feed::v1::FeedGetRequest* ProviderGetRequest::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::feed::v1::FeedGetRequest;
  }
  // @@protoc_insertion_point(field_mutable:feed.v1.ProviderGetRequest.request)
  return request_;
}
inline ::feed::v1::FeedGetRequest* ProviderGetRequest::release_request() {
  // @@protoc_insertion_point(field_release:feed.v1.ProviderGetRequest.request)
  
  ::feed::v1::FeedGetRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline void ProviderGetRequest::set_allocated_request(::feed::v1::FeedGetRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:feed.v1.ProviderGetRequest.request)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace feed

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_feedprovider_2eproto__INCLUDED
