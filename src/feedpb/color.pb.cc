// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: color.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "color.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace feed {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Color_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewColorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewColorRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_color_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_color_2eproto() {
  protobuf_AddDesc_color_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "color.proto");
  GOOGLE_CHECK(file != NULL);
  Color_descriptor_ = file->message_type(0);
  static const int Color_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, hex_),
  };
  Color_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Color_descriptor_,
      Color::default_instance_,
      Color_offsets_,
      -1,
      -1,
      -1,
      sizeof(Color),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _is_default_instance_));
  NewColorRequest_descriptor_ = file->message_type(1);
  static const int NewColorRequest_offsets_[1] = {
  };
  NewColorRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NewColorRequest_descriptor_,
      NewColorRequest::default_instance_,
      NewColorRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(NewColorRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewColorRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewColorRequest, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_color_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Color_descriptor_, &Color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NewColorRequest_descriptor_, &NewColorRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_color_2eproto() {
  delete Color::default_instance_;
  delete Color_reflection_;
  delete NewColorRequest::default_instance_;
  delete NewColorRequest_reflection_;
}

void protobuf_AddDesc_color_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_color_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013color.proto\022\007feed.v1\"\024\n\005Color\022\013\n\003hex\030\001"
    " \001(\t\"\021\n\017NewColorRequest2B\n\016ColorGenerato"
    "r\0220\n\004Next\022\030.feed.v1.NewColorRequest\032\016.fe"
    "ed.v1.ColorB\010Z\006feedpbb\006proto3", 149);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "color.proto", &protobuf_RegisterTypes);
  Color::default_instance_ = new Color();
  NewColorRequest::default_instance_ = new NewColorRequest();
  Color::default_instance_->InitAsDefaultInstance();
  NewColorRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_color_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_color_2eproto {
  StaticDescriptorInitializer_color_2eproto() {
    protobuf_AddDesc_color_2eproto();
  }
} static_descriptor_initializer_color_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kHexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:feed.v1.Color)
}

void Color::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Color::Color(const Color& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:feed.v1.Color)
}

void Color::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:feed.v1.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  hex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_descriptor_;
}

const Color& Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_color_2eproto();
  return *default_instance_;
}

Color* Color::default_instance_ = NULL;

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:feed.v1.Color)
  hex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:feed.v1.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hex = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hex().data(), this->hex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "feed.v1.Color.hex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:feed.v1.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:feed.v1.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:feed.v1.Color)
  // optional string hex = 1;
  if (this->hex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hex().data(), this->hex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "feed.v1.Color.hex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hex(), output);
  }

  // @@protoc_insertion_point(serialize_end:feed.v1.Color)
}

::google::protobuf::uint8* Color::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:feed.v1.Color)
  // optional string hex = 1;
  if (this->hex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hex().data(), this->hex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "feed.v1.Color.hex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:feed.v1.Color)
  return target;
}

int Color::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:feed.v1.Color)
  int total_size = 0;

  // optional string hex = 1;
  if (this->hex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hex());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:feed.v1.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Color* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:feed.v1.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:feed.v1.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feed.v1.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.hex().size() > 0) {

    hex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hex_);
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:feed.v1.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feed.v1.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {

  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  hex_.Swap(&other->hex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Color_descriptor_;
  metadata.reflection = Color_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// optional string hex = 1;
void Color::clear_hex() {
  hex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Color::hex() const {
  // @@protoc_insertion_point(field_get:feed.v1.Color.hex)
  return hex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Color::set_hex(const ::std::string& value) {
  
  hex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:feed.v1.Color.hex)
}
 void Color::set_hex(const char* value) {
  
  hex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:feed.v1.Color.hex)
}
 void Color::set_hex(const char* value, size_t size) {
  
  hex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:feed.v1.Color.hex)
}
 ::std::string* Color::mutable_hex() {
  
  // @@protoc_insertion_point(field_mutable:feed.v1.Color.hex)
  return hex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Color::release_hex() {
  // @@protoc_insertion_point(field_release:feed.v1.Color.hex)
  
  return hex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Color::set_allocated_hex(::std::string* hex) {
  if (hex != NULL) {
    
  } else {
    
  }
  hex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hex);
  // @@protoc_insertion_point(field_set_allocated:feed.v1.Color.hex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewColorRequest::NewColorRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:feed.v1.NewColorRequest)
}

void NewColorRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NewColorRequest::NewColorRequest(const NewColorRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:feed.v1.NewColorRequest)
}

void NewColorRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

NewColorRequest::~NewColorRequest() {
  // @@protoc_insertion_point(destructor:feed.v1.NewColorRequest)
  SharedDtor();
}

void NewColorRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewColorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewColorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewColorRequest_descriptor_;
}

const NewColorRequest& NewColorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_color_2eproto();
  return *default_instance_;
}

NewColorRequest* NewColorRequest::default_instance_ = NULL;

NewColorRequest* NewColorRequest::New(::google::protobuf::Arena* arena) const {
  NewColorRequest* n = new NewColorRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewColorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:feed.v1.NewColorRequest)
}

bool NewColorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:feed.v1.NewColorRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:feed.v1.NewColorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:feed.v1.NewColorRequest)
  return false;
#undef DO_
}

void NewColorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:feed.v1.NewColorRequest)
  // @@protoc_insertion_point(serialize_end:feed.v1.NewColorRequest)
}

::google::protobuf::uint8* NewColorRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:feed.v1.NewColorRequest)
  // @@protoc_insertion_point(serialize_to_array_end:feed.v1.NewColorRequest)
  return target;
}

int NewColorRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:feed.v1.NewColorRequest)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewColorRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:feed.v1.NewColorRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NewColorRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NewColorRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:feed.v1.NewColorRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:feed.v1.NewColorRequest)
    MergeFrom(*source);
  }
}

void NewColorRequest::MergeFrom(const NewColorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feed.v1.NewColorRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void NewColorRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:feed.v1.NewColorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewColorRequest::CopyFrom(const NewColorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feed.v1.NewColorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewColorRequest::IsInitialized() const {

  return true;
}

void NewColorRequest::Swap(NewColorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewColorRequest::InternalSwap(NewColorRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewColorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewColorRequest_descriptor_;
  metadata.reflection = NewColorRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewColorRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace feed

// @@protoc_insertion_point(global_scope)
