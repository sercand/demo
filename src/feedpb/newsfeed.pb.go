// Code generated by protoc-gen-gogo.
// source: newsfeed.proto
// DO NOT EDIT!

package feedpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FeedItem struct {
	Title string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Color string                 `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	Text  string                 `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Info  *FeedItem_ProviderInfo `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
}

func (m *FeedItem) Reset()                    { *m = FeedItem{} }
func (m *FeedItem) String() string            { return proto.CompactTextString(m) }
func (*FeedItem) ProtoMessage()               {}
func (*FeedItem) Descriptor() ([]byte, []int) { return fileDescriptorNewsfeed, []int{0} }

func (m *FeedItem) GetInfo() *FeedItem_ProviderInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type FeedItem_ProviderInfo struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (m *FeedItem_ProviderInfo) Reset()                    { *m = FeedItem_ProviderInfo{} }
func (m *FeedItem_ProviderInfo) String() string            { return proto.CompactTextString(m) }
func (*FeedItem_ProviderInfo) ProtoMessage()               {}
func (*FeedItem_ProviderInfo) Descriptor() ([]byte, []int) { return fileDescriptorNewsfeed, []int{0, 0} }

type FeedGetRequest struct {
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *FeedGetRequest) Reset()                    { *m = FeedGetRequest{} }
func (m *FeedGetRequest) String() string            { return proto.CompactTextString(m) }
func (*FeedGetRequest) ProtoMessage()               {}
func (*FeedGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorNewsfeed, []int{1} }

type FeedGetResponse struct {
	Items []*FeedItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *FeedGetResponse) Reset()                    { *m = FeedGetResponse{} }
func (m *FeedGetResponse) String() string            { return proto.CompactTextString(m) }
func (*FeedGetResponse) ProtoMessage()               {}
func (*FeedGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorNewsfeed, []int{2} }

func (m *FeedGetResponse) GetItems() []*FeedItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*FeedItem)(nil), "feed.v1.FeedItem")
	proto.RegisterType((*FeedItem_ProviderInfo)(nil), "feed.v1.FeedItem.ProviderInfo")
	proto.RegisterType((*FeedGetRequest)(nil), "feed.v1.FeedGetRequest")
	proto.RegisterType((*FeedGetResponse)(nil), "feed.v1.FeedGetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for NewsFeed service

type NewsFeedClient interface {
	Get(ctx context.Context, in *FeedGetRequest, opts ...grpc.CallOption) (*FeedGetResponse, error)
}

type newsFeedClient struct {
	cc *grpc.ClientConn
}

func NewNewsFeedClient(cc *grpc.ClientConn) NewsFeedClient {
	return &newsFeedClient{cc}
}

func (c *newsFeedClient) Get(ctx context.Context, in *FeedGetRequest, opts ...grpc.CallOption) (*FeedGetResponse, error) {
	out := new(FeedGetResponse)
	err := grpc.Invoke(ctx, "/feed.v1.NewsFeed/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NewsFeed service

type NewsFeedServer interface {
	Get(context.Context, *FeedGetRequest) (*FeedGetResponse, error)
}

func RegisterNewsFeedServer(s *grpc.Server, srv NewsFeedServer) {
	s.RegisterService(&_NewsFeed_serviceDesc, srv)
}

func _NewsFeed_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsFeedServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.v1.NewsFeed/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsFeedServer).Get(ctx, req.(*FeedGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NewsFeed_serviceDesc = grpc.ServiceDesc{
	ServiceName: "feed.v1.NewsFeed",
	HandlerType: (*NewsFeedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NewsFeed_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorNewsfeed,
}

func (m *FeedItem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FeedItem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintNewsfeed(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if len(m.Color) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintNewsfeed(data, i, uint64(len(m.Color)))
		i += copy(data[i:], m.Color)
	}
	if len(m.Text) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintNewsfeed(data, i, uint64(len(m.Text)))
		i += copy(data[i:], m.Text)
	}
	if m.Info != nil {
		data[i] = 0x22
		i++
		i = encodeVarintNewsfeed(data, i, uint64(m.Info.Size()))
		n1, err := m.Info.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *FeedItem_ProviderInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FeedItem_ProviderInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintNewsfeed(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Ip) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintNewsfeed(data, i, uint64(len(m.Ip)))
		i += copy(data[i:], m.Ip)
	}
	return i, nil
}

func (m *FeedGetRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FeedGetRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintNewsfeed(data, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *FeedGetResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FeedGetResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			data[i] = 0xa
			i++
			i = encodeVarintNewsfeed(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Newsfeed(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Newsfeed(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintNewsfeed(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *FeedItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovNewsfeed(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovNewsfeed(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovNewsfeed(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovNewsfeed(uint64(l))
	}
	return n
}

func (m *FeedItem_ProviderInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNewsfeed(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovNewsfeed(uint64(l))
	}
	return n
}

func (m *FeedGetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovNewsfeed(uint64(m.Limit))
	}
	return n
}

func (m *FeedGetResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovNewsfeed(uint64(l))
		}
	}
	return n
}

func sovNewsfeed(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNewsfeed(x uint64) (n int) {
	return sovNewsfeed(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeedItem) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewsfeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewsfeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewsfeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewsfeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewsfeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewsfeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewsfeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewsfeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewsfeed
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &FeedItem_ProviderInfo{}
			}
			if err := m.Info.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNewsfeed(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNewsfeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedItem_ProviderInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewsfeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewsfeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewsfeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewsfeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNewsfeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNewsfeed(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNewsfeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedGetRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewsfeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewsfeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNewsfeed(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNewsfeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedGetResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNewsfeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNewsfeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNewsfeed
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &FeedItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNewsfeed(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNewsfeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNewsfeed(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNewsfeed
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNewsfeed
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNewsfeed
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNewsfeed
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNewsfeed
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNewsfeed(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNewsfeed = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNewsfeed   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("newsfeed.proto", fileDescriptorNewsfeed) }

var fileDescriptorNewsfeed = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x91, 0x4d, 0x4a, 0xc4, 0x40,
	0x10, 0x85, 0xed, 0xfc, 0x8c, 0x63, 0x8d, 0x44, 0x6c, 0x04, 0x9b, 0x59, 0x84, 0x90, 0x85, 0x66,
	0x15, 0x30, 0x6e, 0xc4, 0xa5, 0x88, 0xc3, 0x6c, 0x44, 0xb2, 0x74, 0x39, 0xa6, 0x02, 0x0d, 0x49,
	0x3a, 0xa6, 0xcb, 0x19, 0x8f, 0xe2, 0x29, 0x3c, 0x87, 0x4b, 0x8f, 0x20, 0xf1, 0x22, 0x92, 0xee,
	0xf8, 0xc7, 0xec, 0xea, 0xbd, 0x7a, 0xdd, 0xdf, 0x83, 0x82, 0xa0, 0xc1, 0x8d, 0x2e, 0x11, 0x8b,
	0xb4, 0xed, 0x14, 0x29, 0xbe, 0x6b, 0xe6, 0xf5, 0x59, 0xfc, 0xca, 0x60, 0x7a, 0x83, 0x58, 0x2c,
	0x09, 0x6b, 0x7e, 0x04, 0x3e, 0x49, 0xaa, 0x50, 0xb0, 0x88, 0x25, 0x7b, 0xb9, 0x15, 0x83, 0xfb,
	0xa0, 0x2a, 0xd5, 0x09, 0xc7, 0xba, 0x46, 0x70, 0x0e, 0x1e, 0xe1, 0x33, 0x09, 0xd7, 0x98, 0x66,
	0xe6, 0x19, 0x78, 0xb2, 0x29, 0x95, 0xf0, 0x22, 0x96, 0xcc, 0xb2, 0x30, 0x1d, 0x21, 0xe9, 0x37,
	0x20, 0xbd, 0xeb, 0xd4, 0x5a, 0x16, 0xd8, 0x2d, 0x9b, 0x52, 0xe5, 0x26, 0x3b, 0x4f, 0x61, 0xff,
	0xaf, 0xcb, 0x03, 0x70, 0x64, 0x31, 0x16, 0x70, 0x64, 0x61, 0x74, 0x3b, 0xa2, 0x1d, 0xd9, 0xc6,
	0x27, 0x10, 0x0c, 0xdf, 0x2d, 0x90, 0x72, 0x7c, 0x7c, 0x42, 0x4d, 0x43, 0xbf, 0x4a, 0xd6, 0x92,
	0xcc, 0x23, 0x3f, 0xb7, 0x22, 0xbe, 0x84, 0x83, 0x9f, 0x9c, 0x6e, 0x55, 0xa3, 0x91, 0x9f, 0x82,
	0x2f, 0x09, 0x6b, 0x2d, 0x58, 0xe4, 0x26, 0xb3, 0xec, 0x70, 0xab, 0x5f, 0x6e, 0xf7, 0xd9, 0x35,
	0x4c, 0x6f, 0x71, 0xa3, 0x07, 0x9b, 0x5f, 0x80, 0xbb, 0x40, 0xe2, 0xc7, 0xff, 0xc2, 0xbf, 0xf4,
	0xb9, 0xd8, 0x5e, 0x58, 0xdc, 0x95, 0x78, 0xeb, 0x43, 0xf6, 0xde, 0x87, 0xec, 0xa3, 0x0f, 0xd9,
	0xcb, 0x67, 0xb8, 0x73, 0x3f, 0x19, 0xa2, 0xed, 0x6a, 0x35, 0x31, 0x47, 0x38, 0xff, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0xa5, 0xad, 0x8e, 0xfa, 0x96, 0x01, 0x00, 0x00,
}
