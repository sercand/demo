// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace feed {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* FeedItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedGetResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  FeedItem_descriptor_ = file->message_type(0);
  static const int FeedItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedItem, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedItem, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedItem, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedItem, provider_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedItem, score_),
  };
  FeedItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeedItem_descriptor_,
      FeedItem::default_instance_,
      FeedItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeedItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedItem, _is_default_instance_));
  FeedGetRequest_descriptor_ = file->message_type(1);
  static const int FeedGetRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedGetRequest, limit_),
  };
  FeedGetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeedGetRequest_descriptor_,
      FeedGetRequest::default_instance_,
      FeedGetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeedGetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedGetRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedGetRequest, _is_default_instance_));
  FeedGetResponse_descriptor_ = file->message_type(2);
  static const int FeedGetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedGetResponse, items_),
  };
  FeedGetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeedGetResponse_descriptor_,
      FeedGetResponse::default_instance_,
      FeedGetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeedGetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedGetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedGetResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeedItem_descriptor_, &FeedItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeedGetRequest_descriptor_, &FeedGetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeedGetResponse_descriptor_, &FeedGetResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete FeedItem::default_instance_;
  delete FeedItem_reflection_;
  delete FeedGetRequest::default_instance_;
  delete FeedGetRequest_reflection_;
  delete FeedGetResponse::default_instance_;
  delete FeedGetResponse_reflection_;
}

void protobuf_AddDesc_common_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\007feed.v1\"\\\n\010FeedItem\022\r\n\005t"
    "itle\030\001 \001(\t\022\r\n\005color\030\002 \001(\t\022\014\n\004text\030\003 \001(\t\022"
    "\025\n\rprovider_name\030\004 \001(\t\022\r\n\005score\030\005 \001(\005\"\037\n"
    "\016FeedGetRequest\022\r\n\005limit\030\001 \001(\005\"3\n\017FeedGe"
    "tResponse\022 \n\005items\030\001 \003(\0132\021.feed.v1.FeedI"
    "temB\010Z\006feedpbb\006proto3", 221);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  FeedItem::default_instance_ = new FeedItem();
  FeedGetRequest::default_instance_ = new FeedGetRequest();
  FeedGetResponse::default_instance_ = new FeedGetResponse();
  FeedItem::default_instance_->InitAsDefaultInstance();
  FeedGetRequest::default_instance_->InitAsDefaultInstance();
  FeedGetResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeedItem::kTitleFieldNumber;
const int FeedItem::kColorFieldNumber;
const int FeedItem::kTextFieldNumber;
const int FeedItem::kProviderNameFieldNumber;
const int FeedItem::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeedItem::FeedItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:feed.v1.FeedItem)
}

void FeedItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FeedItem::FeedItem(const FeedItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:feed.v1.FeedItem)
}

void FeedItem::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  provider_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
}

FeedItem::~FeedItem() {
  // @@protoc_insertion_point(destructor:feed.v1.FeedItem)
  SharedDtor();
}

void FeedItem::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  provider_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FeedItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedItem_descriptor_;
}

const FeedItem& FeedItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FeedItem* FeedItem::default_instance_ = NULL;

FeedItem* FeedItem::New(::google::protobuf::Arena* arena) const {
  FeedItem* n = new FeedItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeedItem::Clear() {
// @@protoc_insertion_point(message_clear_start:feed.v1.FeedItem)
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  provider_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
}

bool FeedItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:feed.v1.FeedItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "feed.v1.FeedItem.title"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_color;
        break;
      }

      // optional string color = 2;
      case 2: {
        if (tag == 18) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "feed.v1.FeedItem.color"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "feed.v1.FeedItem.text"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_provider_name;
        break;
      }

      // optional string provider_name = 4;
      case 4: {
        if (tag == 34) {
         parse_provider_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->provider_name().data(), this->provider_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "feed.v1.FeedItem.provider_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional int32 score = 5;
      case 5: {
        if (tag == 40) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:feed.v1.FeedItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:feed.v1.FeedItem)
  return false;
#undef DO_
}

void FeedItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:feed.v1.FeedItem)
  // optional string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "feed.v1.FeedItem.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string color = 2;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "feed.v1.FeedItem.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->color(), output);
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "feed.v1.FeedItem.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // optional string provider_name = 4;
  if (this->provider_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->provider_name().data(), this->provider_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "feed.v1.FeedItem.provider_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->provider_name(), output);
  }

  // optional int32 score = 5;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:feed.v1.FeedItem)
}

::google::protobuf::uint8* FeedItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:feed.v1.FeedItem)
  // optional string title = 1;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "feed.v1.FeedItem.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string color = 2;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "feed.v1.FeedItem.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->color(), target);
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "feed.v1.FeedItem.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional string provider_name = 4;
  if (this->provider_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->provider_name().data(), this->provider_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "feed.v1.FeedItem.provider_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->provider_name(), target);
  }

  // optional int32 score = 5;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:feed.v1.FeedItem)
  return target;
}

int FeedItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:feed.v1.FeedItem)
  int total_size = 0;

  // optional string title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // optional string color = 2;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->color());
  }

  // optional string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // optional string provider_name = 4;
  if (this->provider_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->provider_name());
  }

  // optional int32 score = 5;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:feed.v1.FeedItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FeedItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeedItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:feed.v1.FeedItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:feed.v1.FeedItem)
    MergeFrom(*source);
  }
}

void FeedItem::MergeFrom(const FeedItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feed.v1.FeedItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.color().size() > 0) {

    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.provider_name().size() > 0) {

    provider_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.provider_name_);
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void FeedItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:feed.v1.FeedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedItem::CopyFrom(const FeedItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feed.v1.FeedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedItem::IsInitialized() const {

  return true;
}

void FeedItem::Swap(FeedItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeedItem::InternalSwap(FeedItem* other) {
  title_.Swap(&other->title_);
  color_.Swap(&other->color_);
  text_.Swap(&other->text_);
  provider_name_.Swap(&other->provider_name_);
  std::swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeedItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedItem_descriptor_;
  metadata.reflection = FeedItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeedItem

// optional string title = 1;
void FeedItem::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FeedItem::title() const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedItem.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedItem::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:feed.v1.FeedItem.title)
}
 void FeedItem::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:feed.v1.FeedItem.title)
}
 void FeedItem::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:feed.v1.FeedItem.title)
}
 ::std::string* FeedItem::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:feed.v1.FeedItem.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeedItem::release_title() {
  // @@protoc_insertion_point(field_release:feed.v1.FeedItem.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedItem::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:feed.v1.FeedItem.title)
}

// optional string color = 2;
void FeedItem::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FeedItem::color() const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedItem.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedItem::set_color(const ::std::string& value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:feed.v1.FeedItem.color)
}
 void FeedItem::set_color(const char* value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:feed.v1.FeedItem.color)
}
 void FeedItem::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:feed.v1.FeedItem.color)
}
 ::std::string* FeedItem::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:feed.v1.FeedItem.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeedItem::release_color() {
  // @@protoc_insertion_point(field_release:feed.v1.FeedItem.color)
  
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedItem::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:feed.v1.FeedItem.color)
}

// optional string text = 3;
void FeedItem::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FeedItem::text() const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedItem.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedItem::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:feed.v1.FeedItem.text)
}
 void FeedItem::set_text(const char* value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:feed.v1.FeedItem.text)
}
 void FeedItem::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:feed.v1.FeedItem.text)
}
 ::std::string* FeedItem::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:feed.v1.FeedItem.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeedItem::release_text() {
  // @@protoc_insertion_point(field_release:feed.v1.FeedItem.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedItem::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:feed.v1.FeedItem.text)
}

// optional string provider_name = 4;
void FeedItem::clear_provider_name() {
  provider_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& FeedItem::provider_name() const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedItem.provider_name)
  return provider_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedItem::set_provider_name(const ::std::string& value) {
  
  provider_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:feed.v1.FeedItem.provider_name)
}
 void FeedItem::set_provider_name(const char* value) {
  
  provider_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:feed.v1.FeedItem.provider_name)
}
 void FeedItem::set_provider_name(const char* value, size_t size) {
  
  provider_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:feed.v1.FeedItem.provider_name)
}
 ::std::string* FeedItem::mutable_provider_name() {
  
  // @@protoc_insertion_point(field_mutable:feed.v1.FeedItem.provider_name)
  return provider_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeedItem::release_provider_name() {
  // @@protoc_insertion_point(field_release:feed.v1.FeedItem.provider_name)
  
  return provider_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeedItem::set_allocated_provider_name(::std::string* provider_name) {
  if (provider_name != NULL) {
    
  } else {
    
  }
  provider_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provider_name);
  // @@protoc_insertion_point(field_set_allocated:feed.v1.FeedItem.provider_name)
}

// optional int32 score = 5;
void FeedItem::clear_score() {
  score_ = 0;
}
 ::google::protobuf::int32 FeedItem::score() const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedItem.score)
  return score_;
}
 void FeedItem::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:feed.v1.FeedItem.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeedGetRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeedGetRequest::FeedGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:feed.v1.FeedGetRequest)
}

void FeedGetRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FeedGetRequest::FeedGetRequest(const FeedGetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:feed.v1.FeedGetRequest)
}

void FeedGetRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  limit_ = 0;
}

FeedGetRequest::~FeedGetRequest() {
  // @@protoc_insertion_point(destructor:feed.v1.FeedGetRequest)
  SharedDtor();
}

void FeedGetRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeedGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedGetRequest_descriptor_;
}

const FeedGetRequest& FeedGetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FeedGetRequest* FeedGetRequest::default_instance_ = NULL;

FeedGetRequest* FeedGetRequest::New(::google::protobuf::Arena* arena) const {
  FeedGetRequest* n = new FeedGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeedGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:feed.v1.FeedGetRequest)
  limit_ = 0;
}

bool FeedGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:feed.v1.FeedGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 limit = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:feed.v1.FeedGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:feed.v1.FeedGetRequest)
  return false;
#undef DO_
}

void FeedGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:feed.v1.FeedGetRequest)
  // optional int32 limit = 1;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:feed.v1.FeedGetRequest)
}

::google::protobuf::uint8* FeedGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:feed.v1.FeedGetRequest)
  // optional int32 limit = 1;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:feed.v1.FeedGetRequest)
  return target;
}

int FeedGetRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:feed.v1.FeedGetRequest)
  int total_size = 0;

  // optional int32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:feed.v1.FeedGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FeedGetRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeedGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:feed.v1.FeedGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:feed.v1.FeedGetRequest)
    MergeFrom(*source);
  }
}

void FeedGetRequest::MergeFrom(const FeedGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feed.v1.FeedGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void FeedGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:feed.v1.FeedGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedGetRequest::CopyFrom(const FeedGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feed.v1.FeedGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedGetRequest::IsInitialized() const {

  return true;
}

void FeedGetRequest::Swap(FeedGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeedGetRequest::InternalSwap(FeedGetRequest* other) {
  std::swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeedGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedGetRequest_descriptor_;
  metadata.reflection = FeedGetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeedGetRequest

// optional int32 limit = 1;
void FeedGetRequest::clear_limit() {
  limit_ = 0;
}
 ::google::protobuf::int32 FeedGetRequest::limit() const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedGetRequest.limit)
  return limit_;
}
 void FeedGetRequest::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:feed.v1.FeedGetRequest.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeedGetResponse::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeedGetResponse::FeedGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:feed.v1.FeedGetResponse)
}

void FeedGetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FeedGetResponse::FeedGetResponse(const FeedGetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:feed.v1.FeedGetResponse)
}

void FeedGetResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

FeedGetResponse::~FeedGetResponse() {
  // @@protoc_insertion_point(destructor:feed.v1.FeedGetResponse)
  SharedDtor();
}

void FeedGetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeedGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedGetResponse_descriptor_;
}

const FeedGetResponse& FeedGetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FeedGetResponse* FeedGetResponse::default_instance_ = NULL;

FeedGetResponse* FeedGetResponse::New(::google::protobuf::Arena* arena) const {
  FeedGetResponse* n = new FeedGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeedGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:feed.v1.FeedGetResponse)
  items_.Clear();
}

bool FeedGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:feed.v1.FeedGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .feed.v1.FeedItem items = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:feed.v1.FeedGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:feed.v1.FeedGetResponse)
  return false;
#undef DO_
}

void FeedGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:feed.v1.FeedGetResponse)
  // repeated .feed.v1.FeedItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:feed.v1.FeedGetResponse)
}

::google::protobuf::uint8* FeedGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:feed.v1.FeedGetResponse)
  // repeated .feed.v1.FeedItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:feed.v1.FeedGetResponse)
  return target;
}

int FeedGetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:feed.v1.FeedGetResponse)
  int total_size = 0;

  // repeated .feed.v1.FeedItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:feed.v1.FeedGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FeedGetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeedGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:feed.v1.FeedGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:feed.v1.FeedGetResponse)
    MergeFrom(*source);
  }
}

void FeedGetResponse::MergeFrom(const FeedGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feed.v1.FeedGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  items_.MergeFrom(from.items_);
}

void FeedGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:feed.v1.FeedGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedGetResponse::CopyFrom(const FeedGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feed.v1.FeedGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedGetResponse::IsInitialized() const {

  return true;
}

void FeedGetResponse::Swap(FeedGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeedGetResponse::InternalSwap(FeedGetResponse* other) {
  items_.UnsafeArenaSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeedGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedGetResponse_descriptor_;
  metadata.reflection = FeedGetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeedGetResponse

// repeated .feed.v1.FeedItem items = 1;
int FeedGetResponse::items_size() const {
  return items_.size();
}
void FeedGetResponse::clear_items() {
  items_.Clear();
}
const ::feed::v1::FeedItem& FeedGetResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:feed.v1.FeedGetResponse.items)
  return items_.Get(index);
}
::feed::v1::FeedItem* FeedGetResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:feed.v1.FeedGetResponse.items)
  return items_.Mutable(index);
}
::feed::v1::FeedItem* FeedGetResponse::add_items() {
  // @@protoc_insertion_point(field_add:feed.v1.FeedGetResponse.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::feed::v1::FeedItem >*
FeedGetResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:feed.v1.FeedGetResponse.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::feed::v1::FeedItem >&
FeedGetResponse::items() const {
  // @@protoc_insertion_point(field_list:feed.v1.FeedGetResponse.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace feed

// @@protoc_insertion_point(global_scope)
